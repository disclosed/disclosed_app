require "test_helper"
describe Scrapers::<%= @agency.camelize %>::Scraper do

  describe "#scrape_contract" do
    it "should parse the data from a contract page" do
      VCR.use_cassette('<%= @agency.downcase %>_scrape_contracts', record: :new_episodes) do
        report = mock("report")
        notifier = mock("notifier")
        scraper = Scrapers::<%= @agency.camelize %>::Scraper.new(report, notifier)
        contract = scraper.scrape_contract("FILL IN")

        contract[:url].must_equal "FILL IN"
        contract[:vendor_name].must_equal "FILL IN"
        contract[:reference_number].must_equal "FILL IN"
        contract[:raw_contract_period].must_equal "FILL IN"
        contract[:effective_date].must_equal Date.parse("")
        contract[:value].must_equal 999
        contract[:description].must_equal "FILL IN"
        contract[:comments].must_equal "FILL IN"
      end
    end
  end

  describe "#contract_urls" do
    it "should return the urls for all contract pages in the report" do
      VCR.use_cassette('<%= @agency.downcase %>_count_contracts', record: :new_episodes) do
        report = Scrapers::Report.new('<%= @agency.downcase %>', 'FILL IN')
        notifier = ScraperNotifier.new
        scraper = Scrapers::<%= @agency.camelize %>::Scraper.new(report, notifier)
        scraper.contract_urls.length.must_equal 999
        scraper.contract_urls.first.must_equal "FILL IN"
      end
    end
  end

  describe ".reports" do
    it "should return all available reports for the agency" do
      VCR.use_cassette('<%= @agency.downcase %>_reports', record: :new_episodes) do
        reports = Scrapers::<%= @agency.camelize %>::Scraper.reports
        (reports.length > 999).must_equal true
        reports.last.must_be_instance_of(Scrapers::Report)
        reports.last.url.must_equal "FILL IN"

      end
    end
  end
end

